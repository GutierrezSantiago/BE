LONG LIVE CLASSIC AND VANILLA JDBC APPROACH !!!

persistence.xml NO debería estar en un proyecto base/librería
  ==> pero si no se incluye, NO se "optimizan" las clases at build time
    ==> NO se puede incluir el plugin (si aplica) para optimización/enhancement
        "at build time" de las clases.
  ==> otra opción:
    ==> configurar un "javaagent" "at load time" en proyectos clientes


herencia datos <> herencia poo
  ==> alumno --> persona
  ==> "herencia" en el mundo de los datos es más bien "tipificación"


inconsistencia en implementaciones
  ==> eclipselink:
    ==> NO cumple la especificación de joined inheritance
      ==> NO queda otra que modelar:
              Alumno "contains" Persona
                      en vez de
              Alumno "extends" Persona
          (lo cual ES correcto/coherente en el mundo relacional
              pero NO lo es para el paradigma de objetos)
  ==> openjpa:
    ==> construye subclasses en vez de base classes
      ==> NO fciona subclassfetchmode=none (para evitar join innecesario)


listados: queries/vistas
  ==> se necesita modelar 1 clase por c/ listado que se requiera
